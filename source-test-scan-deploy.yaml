apiVersion: carto.run/v1alpha1
kind: ClusterSupplyChain
metadata:
  annotations:
    kbld.k14s.io/images: |
      - origins:
        - resolved:
            tag: v0.61.1
            url: dev.registry.tanzu.vmware.com/supply-chain-security-tools/anchore/grype:v0.61.1
        - preresolved:
            url: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:9ef533905d900ccb86883eeb78843b965be685f8d7e7c31066b4b1d8d383ab41
        url: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:9ef533905d900ccb86883eeb78843b965be685f8d7e7c31066b4b1d8d383ab41
  name: source-test-scan-no-cnrs
spec:
  params:
  - default: ""
    name: ca_cert_data
  - name: maven_repository_url
    value: https://repo.maven.apache.org/maven2
  - default: main
    name: gitops_branch
  - default: supplychain
    name: gitops_user_name
  - default: supplychain
    name: gitops_user_email
  - default: supplychain@cluster.local
    name: gitops_commit_message
  - default: git-https
    name: gitops_ssh_secret
  - default: https://github.com
    name: gitops_server_address
  - default: logankimmel
    name: gitops_repository_owner
  - default: gitops
    name: gitops_repository_name
  - default: github
    name: gitops_server_kind
  - default: ""
    name: gitops_commit_branch
  - default: ready for review
    name: gitops_pull_request_title
  - default: generated by supply chain
    name: gitops_pull_request_body
  - name: image_scanning_service_account_publisher
    value: default
  - default: default
    name: image_scanning_service_account_scanner
  - name: image_scanning_cli
    value:
      image: registry.tanzu.vmware.com/tanzu-application-platform/tap-packages@sha256:9ef533905d900ccb86883eeb78843b965be685f8d7e7c31066b4b1d8d383ab41
  - default: 4Gi
    name: image_scanning_workspace_size
  - name: image_scanning_active_keychains
    value: []
  resources:
  - name: source-provider
    params:
    - default: default
      name: serviceAccount
    - default: go-git
      name: gitImplementation
    templateRef:
      kind: ClusterSourceTemplate
      name: source-template
  - name: source-tester
    sources:
    - name: source
      resource: source-provider
    templateRef:
      kind: ClusterSourceTemplate
      name: testing-pipeline
  - name: image-provider
    params:
    - default: default
      name: serviceAccount
    - name: registry
      value:
        ca_cert_data: ""
        repository: lkimmel-1069/tap
        server: us-west1-docker.pkg.dev
    - default: default
      name: clusterBuilder
    - default: ./Dockerfile
      name: dockerfile
    - default: ./
      name: docker_build_context
    - default: []
      name: docker_build_extra_args
    sources:
    - name: source
      resource: source-tester
    templateRef:
      kind: ClusterImageTemplate
      options:
      - name: kpack-template
        selector:
          matchFields:
          - key: spec.params[?(@.name=="dockerfile")]
            operator: DoesNotExist
      - name: kaniko-template
        selector:
          matchFields:
          - key: spec.params[?(@.name=="dockerfile")]
            operator: Exists
  - images:
    - name: image
      resource: image-provider
    name: image-scanner
    params:
    - default: scan-policy
      name: scanning_image_policy
    - default: private-image-scan-template
      name: scanning_image_template
    - name: registry
      value:
        ca_cert_data: ""
        repository: lkimmel-1069/tap
        server: us-west1-docker.pkg.dev
    templateRef:
      kind: ClusterImageTemplate
      name: image-scanner-template
  - images:
    - name: image
      resource: image-scanner
    name: config-provider
    params:
    - default: default
      name: serviceAccount
    templateRef:
      kind: ClusterConfigTemplate
      name: convention-template
  - configs:
    - name: config
      resource: config-provider
    name: app-config
    templateRef:
      kind: ClusterConfigTemplate
      options:
      - name: config-template-no-cnrs
        selector:
          matchLabels:
            apps.tanzu.vmware.com/workload-type: deployment
      - name: server-template
        selector:
          matchLabels:
            apps.tanzu.vmware.com/workload-type: server
      - name: worker-template
        selector:
          matchLabels:
            apps.tanzu.vmware.com/workload-type: worker
  - configs:
    - name: app_def
      resource: app-config
    name: service-bindings
    templateRef:
      kind: ClusterConfigTemplate
      name: service-bindings
  - configs:
    - name: app_def
      resource: service-bindings
    name: api-descriptors
    templateRef:
      kind: ClusterConfigTemplate
      name: api-descriptors
  - configs:
    - name: config
      resource: api-descriptors
    name: config-writer
    params:
    - default: default
      name: serviceAccount
    - name: registry
      value:
        ca_cert_data: ""
        repository: lkimmel-1069/tap
        server: us-west1-docker.pkg.dev
    templateRef:
      kind: ClusterTemplate
      name: config-writer-and-pull-requester-template
  - name: deliverable
    params:
    - name: registry
      value:
        ca_cert_data: ""
        repository: lkimmel-1069/tap
        server: us-west1-docker.pkg.dev
    - default: go-git
      name: gitImplementation
    templateRef:
      kind: ClusterTemplate
      name: deliverable-template
  selector:
    apps.tanzu.vmware.com/has-tests: "true"
  selectorMatchExpressions:
  - key: apps.tanzu.vmware.com/workload-type
    operator: In
    values:
    - deployment
---
apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: config-template-no-cnrs
spec:
  configPath: .data
  healthRule:
    alwaysHealthy: {}
  lifecycle: mutable
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")
    #@ load("@ytt:template", "template")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end


    #@ def docs_to_map(docs):
    #@   result = {}
    #@   for doc in docs:
    #@      result[doc["kind"]] = doc
    #@   end
    #@   return result
    #@ end

    #@ def kustomize():
    apiVersion: kustomize.config.k8s.io/v1beta1
    kind: Kustomization
    resources:
      - deployment.yaml
      - service.yaml
      - ingress.yaml
    #@ end

    #@ def deployment():
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: #@ data.values.workload.metadata.name
      labels:
        app: #@ data.values.workload.metadata.name
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: #@ data.values.workload.metadata.name
      template:
        metadata:
          labels:
            app: #@ data.values.workload.metadata.name
        spec:
          containers: #@ data.values.config.spec.containers
    #@ end

    #@ def service():
    apiVersion: v1
    kind: Service
    metadata:
      name: #@ data.values.workload.metadata.name
    spec:
      ports:
      - port: 80
        protocol: TCP
        targetPort: 8080
      selector:
        app: #@ data.values.workload.metadata.name
      sessionAffinity: None
      type: ClusterIP
    #@ end

    #@ def ingress():
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: #@ data.values.workload.metadata.name
      namespace: default
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
    spec:
      rules:
      - http:
          paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: #@ data.values.workload.metadata.name
                port:
                  number: 80
    #@ end

    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "config" })
    data:
      kustomization.yaml: #@ yaml.encode(kustomize())
      deployment.yaml: #@ yaml.encode(deployment())
      service.yaml: #@ yaml.encode(service())
      ingress.yaml: #@ yaml.encode(ingress())
       
