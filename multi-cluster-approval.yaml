apiVersion: carto.run/v1alpha1
kind: ClusterSupplyChain
metadata:
  name: gitops-test-scan
  resourceVersion: "498794862"
spec:
  params:
  - name: maven_repository_url
    value: https://repo.maven.apache.org/maven2
  - default: main
    name: gitops_branch
  - default: supplychain
    name: gitops_user_name
  - default: supplychain
    name: gitops_user_email
  - default: supplychain@cluster.local
    name: gitops_commit_message
  - default: git-https
    name: gitops_ssh_secret
  - default: https://github.com
    name: gitops_server_address
  - default: logankimmel
    name: gitops_repository_owner
  - default: gitops
    name: gitops_repository_name
  - default: github
    name: gitops_server_kind
  - default: ""
    name: gitops_commit_branch
  - default: ready for review
    name: gitops_pull_request_title
  - default: generated by supply chain
    name: gitops_pull_request_body
  resources:
  - name: source-provider
    params:
    - name: serviceAccount
      value: default
    - name: gitImplementation
      value: go-git
    templateRef:
      kind: ClusterSourceTemplate
      name: source-template
  - name: source-tester
    sources:
    - name: source
      resource: source-provider
    templateRef:
      kind: ClusterSourceTemplate
      name: testing-pipeline
  - name: source-scanner
    params:
    - default: scan-policy
      name: scanning_source_policy
    - default: blob-source-scan-template
      name: scanning_source_template
    sources:
    - name: source
      resource: source-tester
    templateRef:
      kind: ClusterSourceTemplate
      name: source-scanner-template
  - name: image-builder
    params:
    - name: serviceAccount
      value: default
    - name: registry
      value:
        ca_cert_data: ""
        repository: tap
        server: harbor.vmw.binbytes.io
    - default: default
      name: clusterBuilder
    - default: ./Dockerfile
      name: dockerfile
    - default: ./
      name: docker_build_context
    - default: []
      name: docker_build_extra_args
    sources:
    - name: source
      resource: source-scanner
    templateRef:
      kind: ClusterImageTemplate
      options:
      - name: kpack-template
        selector:
          matchFields:
          - key: spec.params[?(@.name=="dockerfile")]
            operator: DoesNotExist
      - name: kaniko-template
        selector:
          matchFields:
          - key: spec.params[?(@.name=="dockerfile")]
            operator: Exists
  - images:
    - name: image
      resource: image-builder
    name: image-scanner
    params:
    - default: scan-policy
      name: scanning_image_policy
    - default: private-image-scan-template
      name: scanning_image_template
    templateRef:
      kind: ClusterImageTemplate
      name: image-scanner-template
  - images:
    - name: image
      resource: image-scanner
    name: config-provider
    params:
    - name: serviceAccount
      value: default
    templateRef:
      kind: ClusterConfigTemplate
      name: convention-template
  - configs:
    - name: config
      resource: config-provider
    name: app-config
    templateRef:
      kind: ClusterConfigTemplate
      name: config-template
  - configs:
    - name: config
      resource: app-config
    name: config-writer
    sources:
    - name: source
      resource: source-provider
    params:
    - name: serviceAccount
      value: default
    - name: registry
      value:
        ca_cert_data: ""
        repository: tap
        server: harbor.vmw.binbytes.io
    templateRef:
      kind: ClusterTemplate
      name: gitops-config-writer-and-pull-requester-template
  - name: deliverable
    sources:
    - name: source
      resource: source-provider
    params:
    - name: registry
      value:
        ca_cert_data: ""
        repository: tap
        server: harbor.vmw.binbytes.io
    templateRef:
      kind: ClusterTemplate
      name: gitops-deliverable-template
  selector:
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: gitops
---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  labels:
    app.tanzu.vmware.com/deliverable-type: web
    kapp.k14s.io/app: "1657647125051646677"
    kapp.k14s.io/association: v1.1ffcda80f456c9e6f298bc5cfbbe05cb
  name: gitops-deliverable-template
  resourceVersion: "339338834"
  uid: adf227f7-978a-4778-ba5d-7c308d0d7433
spec:
  params:
  - default: {}
    name: registry
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:assert", "assert")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def is_monorepo_approach():
    #@   if 'gitops_server_address' in data.values.params and 'gitops_repository_owner' in data.values.params and 'gitops_repository_name' in data.values.params:
    #@     return True
    #@   end
    #@   if 'gitops_server_address' in data.values.params or 'gitops_repository_owner' in data.values.params or 'gitops_repository_name' in data.values.params:
    #@     'gitops_server_address' in data.values.params or assert.fail("missing param: gitops_server_address")
    #@     'gitops_repository_owner' in data.values.params or assert.fail("missing param: gitops_repository_owner")
    #@     'gitops_repository_name' in data.values.params or assert.fail("missing param: gitops_repository_name")
    #@   end
    #@   return False
    #@ end

    #@ def has_git_params():
    #@   if 'gitops_repository_prefix' in data.values.params:
    #@     return True
    #@   end
    #@
    #@   if 'gitops_repository' in data.values.params:
    #@     return True
    #@   end
    #@
    #@   return False
    #@ end

    #@ def is_gitops():
    #@   return is_monorepo_approach() or has_git_params()
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def strip_trailing_slash(some_string):
    #@   if some_string[-1] == "/":
    #@     return some_string[:-1]
    #@   end
    #@   return some_string
    #@ end

    #@ def mono_repository():
    #@   strip_trailing_slash(data.values.params.gitops_server_address)
    #@   return "/".join([
    #@     strip_trailing_slash(data.values.params.gitops_server_address),
    #@     strip_trailing_slash(data.values.params.gitops_repository_owner),
    #@     data.values.params.gitops_repository_name,
    #@   ]) + ".git"
    #@ end

    #@ def git_repository():
    #@   if is_monorepo_approach():
    #@     return mono_repository()
    #@   end
    #@
    #@   if 'gitops_repository' in data.values.params:
    #@     return param("gitops_repository")
    #@   end
    #@
    #@   prefix = param("gitops_repository_prefix")
    #@   return prefix + data.values.workload.metadata.name + ".git"
    #@ end

    #@ def image():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@      "bundle",
    #@    ])
    #@   ]) + ":" + data.values.workload.metadata.uid
    #@ end

    #@ def git_commit():
    #@   ref = data.values.source.revision
    #@   return ref.replace("main/","git-")
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Deliverable
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "deliverable", "app.tanzu.vmware.com/deliverable-type": "web" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      #@ if/end is_gitops():
      params:
        - name: "gitops_ssh_secret"
          value: #@ param("gitops_ssh_secret")
        #@ if/end is_monorepo_approach():
        - name: gitops_sub_path
          value: #@ "config/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name

      source:
        #@ if/end is_gitops():
        git:
          url: #@ git_repository()
          ref:
            branch: #@ git_commit()

        #@ if/end not is_gitops():
        image: #@ image()
---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: gitops-config-writer-and-pull-requester-template
spec:
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:json", "json")
    #@ load("@ytt:base64", "base64")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def git_commit():
    #@   ref = data.values.source.revision
    #@   return ref.replace("main/","git-")
    #@ end

    #@ def commit_link():
    #@   ref = data.values.source.revision.replace("main/","")
    #@   return data.values.workload.spec.source.git.url + "/commit/" + ref
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-config-writer-pull-requester"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "config-writer-pull-requester" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      runTemplateRef:
        name: commit-and-pr-pipelinerun

      inputs:
        serviceAccount: #@ data.values.params.serviceAccount
        git_server_kind: #@ data.values.params.gitops_server_kind
        git_server_address: #@ data.values.params.gitops_server_address
        commit_branch: #@ git_commit()
        pull_request_title: #@ data.values.params.gitops_pull_request_title
        pull_request_body: #@ "Change found here:" + commit_link()
        repository_owner: #@ data.values.params.gitops_repository_owner
        repository_name: #@ data.values.params.gitops_repository_name
        base_branch: #@ data.values.params.gitops_branch
        git_user_name: #@ data.values.params.gitops_user_name
        git_user_email: #@ data.values.params.gitops_user_email
        git_commit_message: #@ data.values.params.gitops_commit_message
        git_files: #@ base64.encode(json.encode(data.values.config))
        sub_path: #@ "config/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name